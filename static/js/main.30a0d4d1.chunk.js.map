{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","showItem","selectedLanguage","selectedItem","selectedDialog","selectedI2","renderConsoleLog","terms","inventoryItems","MonoBehaviour","allTerms","termsSplitted","map","term","split","entityTypes","Set","console","log","dialogs","i2Items","getAllLanguages","languages","mLanguages","language","value","indexOf","Name","getAllItemsAsOptions","itemId","getItemDescription","itemDescription","mTerms","find","element","Term","undefined","Languages","getAllDialogsAsOptions","dialogId","getDialogDescription","dialogDescription","getAllI2AsOptions","i2Id","getI2Description","i2Description","handleLanguageSelectChange","event","setState","target","handleItemSelectChange","handleDialogSelectChange","handleI2SelectChange","this","className","onChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30a0d4d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport dialogs from './data/DialogLanguages.json';\nimport i2Items from './data/I2Languages.json';\nimport inventoryItems from './data/InventoryLanguages.json';\n\nclass App extends Component {\n\n  state = {\n    showItem: false,\n    selectedLanguage: 0,\n    selectedItem: 'Select a value',\n    selectedDialog: 'Select a value',\n    selectedI2: 'Select a value'\n  };\n\n  renderConsoleLog = () => {\n    let terms = inventoryItems.MonoBehaviour.allTerms;\n    let termsSplitted = terms.map(term => term.split(\"/\")[0]);\n    let entityTypes = new Set(termsSplitted);\n    console.log(entityTypes);\n    terms = dialogs.MonoBehaviour.allTerms;\n    termsSplitted = terms.map(term => term.split(\"/\")[0]);\n    entityTypes = new Set(termsSplitted);\n    console.log(entityTypes);\n    terms = i2Items.MonoBehaviour.allTerms;\n    termsSplitted = terms.map(term => term.split(\"/\")[0]);\n    entityTypes = new Set(termsSplitted);\n    console.log(entityTypes);\n  }\n\n  getAllLanguages = () => {\n    let languages = inventoryItems.MonoBehaviour.mLanguages;\n    return languages.map(language => <option value={languages.indexOf(language)}>{language.Name}</option>)\n  }\n\n  getAllItemsAsOptions = () => {\n    let itemIds = inventoryItems.MonoBehaviour.allTerms;\n    return itemIds.map(itemId => <option value={itemId}>{itemId}</option>)\n  }\n\n  getItemDescription = () => {\n    let itemDescription = inventoryItems.MonoBehaviour.mTerms.find(element => element.Term === this.state.selectedItem);\n    return itemDescription === undefined ? null : itemDescription.Languages[this.state.selectedLanguage];\n  }\n\n  getAllDialogsAsOptions = () => {\n    let dialogIds = dialogs.MonoBehaviour.allTerms;\n    return dialogIds.map(dialogId => <option value={dialogId}>{dialogId}</option>)\n  }\n\n  getDialogDescription = () => {\n    let dialogDescription = dialogs.MonoBehaviour.mTerms.find(element => element.Term === this.state.selectedDialog);\n    return dialogDescription === undefined ? null : dialogDescription.Languages[this.state.selectedLanguage];\n  }\n\n  getAllI2AsOptions = () => {\n    let i2Ids = i2Items.MonoBehaviour.allTerms;\n    return i2Ids.map(i2Id => <option value={i2Id}>{i2Id}</option>)\n  }\n\n  getI2Description = () => {\n    let i2Description = i2Items.MonoBehaviour.mTerms.find(element => element.Term === this.state.selectedI2);\n    return i2Description === undefined ? null : i2Description.Languages[this.state.selectedLanguage];\n  }\n\n  handleLanguageSelectChange = (event) => {\n    this.setState({selectedLanguage: event.target.value});\n    console.log('selected language position: ' + this.state.selectedLanguage);\n  }\n\n  handleItemSelectChange = (event) => {\n    this.setState({selectedItem: event.target.value});\n    console.log('selected item: ' + this.state.selectedItem);\n  }\n\n  handleDialogSelectChange = (event) => {\n    this.setState({selectedDialog: event.target.value});\n    console.log('selected dialog: ' + this.state.selectedDialog);\n  }\n\n  handleI2SelectChange = (event) => {\n    this.setState({selectedI2: event.target.value});\n    console.log('selected i2: ' + this.state.selectedI2);\n  }\n\n  render() {\n    this.renderConsoleLog();\n    return (\n      <div className=\"App\">\n        <h1>Blasphemous Info</h1>\n        <select\n          onChange={this.handleLanguageSelectChange}>\n          {this.getAllLanguages()}\n        </select>\n        <div className=\"App-box\">\n        <h2>Items</h2>\n        <select\n          onChange={this.handleItemSelectChange}>\n          {this.getAllItemsAsOptions()}\n        </select>\n        <p>\n          {this.getItemDescription()}\n        </p>\n        </div>\n        <div className=\"App-box\">\n        <h2>Dialogs</h2>\n        <select\n          onChange={this.handleDialogSelectChange}>\n          {this.getAllDialogsAsOptions()}\n        </select>\n        <p>\n          {this.getDialogDescription()}\n        </p>\n        </div>\n        <div className=\"App-box\">\n        <h2>I2</h2>\n        <select\n          onChange={this.handleI2SelectChange}>\n          {this.getAllI2AsOptions()}\n        </select>\n        <p>\n          {this.getI2Description()}\n        </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}